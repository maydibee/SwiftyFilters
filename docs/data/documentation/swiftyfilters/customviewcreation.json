{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftyFilters provides default views for filter components like "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFMultiSelectionFilter"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFKeywordsFilter"},{"type":"text","text":". However, SwiftyFilters is also flexible in terms of UI, allowing you to implement your own custom UI for filter components if the default implementations do not meet your requirements. This is particularly useful when working with filters such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFRangeFilter"},{"type":"text","text":" or "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFSingleValueFilter"},{"type":"text","text":", which do not come with default views."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Additionally, SwiftyFilters offers example views for these filters, which you can copy into your project, customize as needed, or use as references for creating your own custom UI for filter components."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this article, we will explore how to create custom filter views using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFRangeFilter"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFMultiSelectionFilter"},{"type":"text","text":" as examples. The general approach will be similar for other filter types."}]},{"anchor":"Creating-a-custom-view-for-a-range-filter","level":3,"type":"heading","text":"Creating a custom view for a range filter"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s assume we need a view responsible for representing a date range filter."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The implementation and controls of the view may vary depending on specific needs, but the key aspect is that your view should embed the corresponding type of node manager and operate with it as a view model. Each filter type has a dedicated node manager, but all nodes share a common purpose:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Providing the component title specified when defining the filter"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Managing the state of the filter component, such as filter activity or loading state"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Providing a model of criteria items for updates"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Enabling bulk operations like resetting the filter"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now, let’s dive into the implementation of a custom date range view and see how to interact with the view node:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how the view might look:"}]},{"type":"codeListing","syntax":"swift","code":["import SwiftyFilters","","","struct FilterDateRangeView<FilteredItem>: View {","    ","    @StateObject var node: SFFilterRangeNode<FilteredItem, Date>","    ","    @Environment(\\.colorScheme) private var colorScheme","","    ","    var body: some View {","        ","        Button {","            node.resetAllFilters()","        } label: {","            Text(\"Reset\")","        }","","        List {","            if !node.nestedNodes.isEmpty {","                ForEach(node.nestedNodes) { child in","                    FilterCellView(node: child)","                        .onTapGesture {","                            child.isItemEnabled.toggle()","                        }","                }","            }","            ","            dateSection(title: \"Start date\",","                        date: Binding(","                            get: { node.range.lowerBound ?? Date() },","                            set: { newValue in","                                node.range = SFFilterRange(lowerBound: newValue.startOfDay, upperBound: node.range.upperBound)","                            }),","                        range: Date.distantPast...(node.range.upperBound ?? Date.distantFuture),","                        isActive: node.range.lowerBound != nil,","                        onReset: { node.range = SFFilterRange(lowerBound: nil, upperBound: node.range.upperBound) }","            )","            ","            dateSection(title: \"Finish date\",","                        date: Binding(","                            get: { node.range.upperBound ?? Date() },","                            set: { newValue in","                                node.range = SFFilterRange(lowerBound: node.range.lowerBound, upperBound: newValue.endOfDay)","                            }),","                        range: (node.range.lowerBound ?? Date.distantPast)...Date.distantFuture,","                        isActive: node.range.upperBound != nil,","                        onReset: { node.range = SFFilterRange(lowerBound: node.range.lowerBound, upperBound: nil) }","            )","        }","        .navigationTitle(node.title)","    }","}","","","\/\/ MARK: - UI Components","","private extension FilterDateRangeView {","    ","    func dateSection(title: String, date: Binding<Date>, range: ClosedRange<Date>, isActive: Bool, onReset: @escaping () -> Void) -> some View {","        VStack(spacing: 8) {","            headerView(title: title, isActive: isActive, onReset: onReset)","            datePickerView(date: date, range: range)","        }","    }","    ","    func headerView(title: String, isActive: Bool, onReset: @escaping () -> Void) -> some View {","        HStack {","            Text(title)","                .bold()","                .foregroundStyle(isActive ? .blue : colorScheme == .dark ? .white : .black)","            Spacer()","            Button(\"Reset\", action: onReset)","                .disabled(!isActive)","        }","        .padding(.horizontal, 5)","    }","    ","    func datePickerView(date: Binding<Date>, range: ClosedRange<Date>) -> some View {","        DatePicker(\"\", selection: date, in: range, displayedComponents: .date)","            .datePickerStyle(.wheel)","            .labelsHidden()","    }","}","","","public struct FilterCellView<FilteredItem>: View {","    ","    @StateObject var node: SFFilterNode<FilteredItem>","    ","    public var body: some View {","        HStack {","            Text(node.title)","            Spacer()","            Group {","                if node.isItemEnabled {","                    Image(systemName: \"checkmark.circle.fill\")","                } else {","                    Image(systemName: \"circle\")","                }","            }","            .foregroundColor(.blue)","        }","        .contentShape(Rectangle())","    }","}"]},{"anchor":"What-happens-in-this-implementation","level":3,"type":"heading","text":"What happens in this implementation?"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We embed "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterRangeNode"},{"type":"text","text":" into the view and use it as a view model. Since we are creating a date range filter, we specify "},{"type":"codeVoice","code":"Date"},{"type":"text","text":" as the type for the second generic parameter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We use the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterRangeNode\/range"},{"type":"text","text":" model from the node to obtain and modify the lower and upper bounds of the date range, as well as to reset it if needed."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The title is used to represent the navigation title."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We create a separate button responsible for resetting the filter by calling the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterRangeNode\/resetAllFilters()"},{"type":"text","text":" method."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"All nested nodes of the node will be loaded automatically when our custom view appears on the screen. In the case of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterRangeNode"},{"type":"text","text":", after loading, the nested nodes will contain only the “None” option if it has been included via the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFRangeFilter\/includeNone(withTitle:)"},{"type":"text","text":" method. To display this, we use a "},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" view, passing the child node to an implemented "},{"type":"codeVoice","code":"FilterCellView"},{"type":"text","text":", which represents the title and selection state of the child node."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Additionally, we trigger changes in the selection state by tapping on "},{"type":"codeVoice","code":"FilterCellView"},{"type":"text","text":", allowing the user to enable or disable a criteria item (e.g., the “None” option in this case)."}]}]}]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can combine a custom views with the views provided by the framework, for example in our case we could use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterCellView"},{"type":"text","text":" instead of creating "},{"type":"codeVoice","code":"FilterCellView"},{"type":"text","text":" if it meet your requirements."}]}],"type":"aside","name":"Tip"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All nested nodes of the node will be loaded automatically when our custom view appears on the screen."}]},{"anchor":"Using-the-custom-view","level":3,"type":"heading","text":"Using the custom view"},{"type":"paragraph","inlineContent":[{"type":"text","text":"After the view is ready, we can use it to display the range filter component by calling the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFRangeFilter\/displayIn(_:)"},{"type":"text","text":" method:"}]},{"type":"codeListing","syntax":"swift","code":["","\/\/ MARK: Manufacture date filter","","SFRangeFilter(title: \"Manufacture date\")","    .filter(by: \\.manufactureDate)","    .displayIn { node in","        FilterDateRangeView(node: node)","    }",""]},{"anchor":"Creating-a-custom-view-for-a-multi-selection-filter","level":3,"type":"heading","text":"Creating a custom view for a multi-selection filter"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Creating a custom view for a multi-selection filter is almost the same as for a range filter, but it uses a different type of node manager: "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterMultiSelectionNode"},{"type":"text","text":", which is designed for multi-selection filters."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The main difference lies in the nested nodes. While a range filter node contains only a “None” option (if included), a multi-selection filter node contains child nodes corresponding to each criteria item, plus the “None” option if included."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In a multi-selection filter component, the main node provides nested nodes for each criteria item. These nodes can be used to display the list of selectable options in the multi-selection view and to manage user interactions. To represent each criteria item, we can use either the "},{"type":"codeVoice","code":"FilterCellView"},{"type":"text","text":" implemented above or the default "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterCellView"},{"type":"text","text":" provided by the framework."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The creation of a custom view for a multi-selection filter is briefly covered in the following article: "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/Usage"}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftyfilters\/customviewcreation"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/CustomViewCreation","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn how to create custom views for filter components"}],"kind":"article","metadata":{"roleHeading":"Article","images":[{"type":"icon","identifier":"logoswiftyfilters.png"}],"title":"Creation of custom views","role":"article","modules":[{"name":"SwiftyFilters"}]},"hierarchy":{"paths":[["doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters"]]},"seeAlsoSections":[{"title":"Essentials","identifiers":["doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/Usage","doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilter","doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFiltersCore","doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterRootView","doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFGroupedComponent"],"generated":true}],"references":{"doc://SwiftyFilters/documentation/SwiftyFilters/SFRangeFilter/displayIn(_:)":{"role":"symbol","title":"displayIn(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"displayIn"},{"kind":"text","text":"((("},{"kind":"typeIdentifier","text":"SFFilterRangeNode","preciseIdentifier":"s:13SwiftyFilters17SFFilterRangeNodeC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"FilteredItem","preciseIdentifier":"s:13SwiftyFilters13SFRangeFilterC12FilteredItemxmfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"CriteriaItem","preciseIdentifier":"s:13SwiftyFilters13SFRangeFilterC12CriteriaItemq_mfp"},{"kind":"text","text":">) -> "},{"kind":"keyword","text":"any"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"},{"kind":"text","text":")) -> "},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"type":"text","text":"Sets the view representation of the filter component."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFRangeFilter\/displayIn(_:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftyfilters\/sfrangefilter\/displayin(_:)"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFRangeFilter":{"role":"symbol","title":"SFRangeFilter","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SFRangeFilter"}],"abstract":[{"type":"text","text":"A builder for creating range-based filter components."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFRangeFilter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SFRangeFilter"}],"url":"\/documentation\/swiftyfilters\/sfrangefilter"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFGroupedComponent":{"role":"symbol","title":"SFGroupedComponent","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SFGroupedComponent"}],"abstract":[{"type":"text","text":"A component that groups multiple filter components under a single title."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFGroupedComponent","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SFGroupedComponent"}],"url":"\/documentation\/swiftyfilters\/sfgroupedcomponent"},"doc://SwiftyFilters/documentation/SwiftyFilters":{"images":[{"type":"icon","identifier":"logoswiftyfilters.png"}],"role":"collection","title":"SwiftyFilters","abstract":[{"type":"text","text":"A lightweight framework designed to simplify the creation of complex filter systems in iOS apps"}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters","kind":"symbol","type":"topic","url":"\/documentation\/swiftyfilters"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFFilterMultiSelectionNode":{"role":"symbol","title":"SFFilterMultiSelectionNode","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SFFilterMultiSelectionNode"}],"abstract":[{"type":"text","text":"A specialized node manager for multi-selection filters."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterMultiSelectionNode","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SFFilterMultiSelectionNode"}],"url":"\/documentation\/swiftyfilters\/sffiltermultiselectionnode"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFRangeFilter/includeNone(withTitle:)":{"role":"symbol","title":"includeNone(withTitle:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"includeNone"},{"kind":"text","text":"("},{"kind":"externalParam","text":"withTitle"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"type":"text","text":"Includes a “None” option in the filter."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFRangeFilter\/includeNone(withTitle:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftyfilters\/sfrangefilter\/includenone(withtitle:)"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFSingleValueFilter":{"role":"symbol","title":"SFSingleValueFilter","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SFSingleValueFilter"}],"abstract":[{"type":"text","text":"A builder for creating single-value filter components."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFSingleValueFilter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SFSingleValueFilter"}],"url":"\/documentation\/swiftyfilters\/sfsinglevaluefilter"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFFilterRootView":{"role":"symbol","title":"SFFilterRootView","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SFFilterRootView"}],"abstract":[{"type":"text","text":"A view that displays the root of the filter hierarchy."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterRootView","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SFFilterRootView"}],"url":"\/documentation\/swiftyfilters\/sffilterrootview"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFFilterRangeNode":{"role":"symbol","title":"SFFilterRangeNode","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SFFilterRangeNode"}],"abstract":[{"type":"text","text":"A specialized node manager for range-based filters."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterRangeNode","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SFFilterRangeNode"}],"url":"\/documentation\/swiftyfilters\/sffilterrangenode"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFFiltersCore":{"role":"symbol","title":"SFFiltersCore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SFFiltersCore"}],"abstract":[{"type":"text","text":"The main entry point for working with filters in client code."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFiltersCore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SFFiltersCore"}],"url":"\/documentation\/swiftyfilters\/sffilterscore"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFMultiSelectionFilter":{"role":"symbol","title":"SFMultiSelectionFilter","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SFMultiSelectionFilter"}],"abstract":[{"type":"text","text":"A builder for creating multi-selection filter components."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFMultiSelectionFilter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SFMultiSelectionFilter"}],"url":"\/documentation\/swiftyfilters\/sfmultiselectionfilter"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFFilterRangeNode/range":{"role":"symbol","title":"range","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"range"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SFFilterRange","preciseIdentifier":"s:13SwiftyFilters13SFFilterRangeV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"CriteriaItem","preciseIdentifier":"s:13SwiftyFilters17SFFilterRangeNodeC12CriteriaItemq_mfp"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A model representing the range for UI updates."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterRangeNode\/range","kind":"symbol","type":"topic","url":"\/documentation\/swiftyfilters\/sffilterrangenode\/range"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFKeywordsFilter":{"role":"symbol","title":"SFKeywordsFilter","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SFKeywordsFilter"}],"abstract":[{"type":"text","text":"A builder for creating keyword-based filter components."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFKeywordsFilter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SFKeywordsFilter"}],"url":"\/documentation\/swiftyfilters\/sfkeywordsfilter"},"logoswiftyfilters.png":{"alt":"Logo","type":"image","identifier":"logoswiftyfilters.png","variants":[{"url":"\/images\/logoswiftyfilters.png","traits":["1x","light"]}]},"doc://SwiftyFilters/documentation/SwiftyFilters/SFFilterRangeNode/resetAllFilters()":{"role":"symbol","title":"resetAllFilters()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resetAllFilters"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Resets the range model and all nested nodes."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterRangeNode\/resetAllFilters()","kind":"symbol","type":"topic","url":"\/documentation\/swiftyfilters\/sffilterrangenode\/resetallfilters()"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFFilterCellView":{"role":"symbol","title":"SFFilterCellView","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SFFilterCellView"}],"abstract":[{"type":"text","text":"Default cell view for nested nodes state representation"}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterCellView","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SFFilterCellView"}],"url":"\/documentation\/swiftyfilters\/sffiltercellview"},"doc://SwiftyFilters/documentation/SwiftyFilters/Usage":{"images":[{"type":"icon","identifier":"logoswiftyfilters.png"}],"role":"article","title":"Getting started with SwiftyFilters","abstract":[{"type":"text","text":"Integrate SwiftyFilters into an iOS app and build filters effortlessly using a declarative approach"}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/Usage","kind":"article","type":"topic","url":"\/documentation\/swiftyfilters\/usage"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFFilter":{"role":"symbol","title":"SFFilter","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SFFilter"}],"abstract":[{"type":"text","text":"A protocol that defines a filter component, which can be used to build complex filters."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SFFilter"}],"url":"\/documentation\/swiftyfilters\/sffilter"}}}
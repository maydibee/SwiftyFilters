{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Deprecated-Notice","level":2,"type":"heading","text":"Deprecated Notice"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftyFilters previously supported an imperative approach to implementing filters. However, this method is now considered "},{"type":"strong","inlineContent":[{"type":"text","text":"deprecated"}]},{"type":"text","text":" due to the availability of a more "},{"type":"strong","inlineContent":[{"type":"text","text":"built-in"}]},{"type":"text","text":" and "},{"type":"strong","inlineContent":[{"type":"text","text":"declarative filtering logic"}]},{"type":"text","text":" with enhanced features. It is recommended to use the new built-in filtering approach for a more efficient and streamlined experience."}]},{"anchor":"Filters-Implementation","level":2,"type":"heading","text":"Filters Implementation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When implementing filters, there are four key aspects to consider:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"What is the input data for the filter?"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"What is the criteria item for the filter?"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"How should input data be filtered according to the criteria?"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"How should the filter component be represented in the UI?"}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Letâ€™s go through each step in detail."}]},{"anchor":"1-Filtered-Input-Data","level":2,"type":"heading","text":"1. Filtered Input Data"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The input data refers to the collection of items that need filtering. Typically, this will be an array of objects, such as "},{"type":"codeVoice","code":"Aircraft"},{"type":"text","text":" models."}]},{"type":"codeListing","syntax":"swift","code":["let aircraftList: [Aircraft] = [...]"]},{"anchor":"2-Defining-the-Criteria","level":2,"type":"heading","text":"2. Defining the Criteria"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The filter criteria define how the filtering will be executed. If multiple components influence the filtering process, an array of criteria items will be required."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SFFilterFetcher"},{"type":"text","text":" protocol is responsible for fetching all criteria items used in filtering."}]},{"anchor":"Fetcher-Implementation","level":3,"type":"heading","text":"Fetcher Implementation"},{"type":"codeListing","syntax":"swift","code":["import SwiftyFilters","","\/\/ MARK: - AircraftTypeFilter Fetcher Implementation","class AircraftTypeFilterFetcher: SFFilterFetcher {","    func fetchFilterItems() async -> [AircraftType] {","        try? await Task.sleep(nanoseconds: 200_000_000)","        ","        return [","            AircraftType.mockAirbus1,","            AircraftType.mockAirbus2,","            AircraftType.mockBoeing1,","            AircraftType.mockBoeing2,","        ]","    }","}"]},{"anchor":"3-Filtering-Logic","level":2,"type":"heading","text":"3. Filtering Logic"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SFFilterResolver"},{"type":"text","text":" protocol is responsible for defining the filtering behavior. The resolver method takes the input data and criteria and returns the filtered result."}]},{"anchor":"Resolver-Implementation","level":3,"type":"heading","text":"Resolver Implementation"},{"type":"codeListing","syntax":"swift","code":["import SwiftyFilters","","\/\/ MARK: - AircraftTypeFilter Resolver Implementation","class AircraftTypeFilterResolver: SFFilterResolver {","    func filterItems(_ inputItems: [Aircraft], basedOn criteriaItem: [AircraftType], isNoneEnabled: Bool) -> [Aircraft] {","        inputItems.filter { inputItem in","            criteriaItem.contains { $0.id == inputItem.id }","        }","    }","}"]},{"anchor":"4-UI-Representation","level":2,"type":"heading","text":"4. UI Representation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SFFilterViewProvider"},{"type":"text","text":" protocol defines how the filter component is presented in the UI."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For multi-selection filters, the framework provides a default view, but a custom view can be implemented if necessary."}]},{"anchor":"Filter-View-Implementation","level":3,"type":"heading","text":"Filter View Implementation"},{"type":"codeListing","syntax":"swift","code":["import SwiftUI","import SwiftyFilters","","\/\/ MARK: - AircraftTypeFilter View","struct AircraftTypeFilterView: View {","    @StateObject var node: SFFilterMultiSelectionNode<Aircraft>","    ","    var body: some View {","        Group {","            if node.isLoading {","                ProgressView()","            } else {","                List {","                    ForEach(node.nestedNodes) { child in","                        AircraftTypeFilterCellView(node: child)","                            .onTapGesture { child.isItemEnabled.toggle() }","                    }","                }","            }","        }","    }","}","","\/\/ MARK: - Filter Cell View","struct AircraftTypeFilterCellView: View {","    @StateObject var node: SFFilterNode<Aircraft>","    ","    var body: some View {","        HStack {","            Text(node.title)","                .foregroundStyle(node.isItemEnabled ? .blue : .gray)","            Spacer()","        }","    }","}"]},{"anchor":"View-Provider-Implementation","level":3,"type":"heading","text":"View Provider Implementation"},{"type":"codeListing","syntax":"swift","code":["class AircraftTypeFilterViewProvider: SFFilterMultiSelectionViewProvider {","    func makeView(with node: SFFilterMultiSelectionNode<Aircraft>) -> any View {","        AircraftTypeFilterView(node: node)","    }","}"]},{"anchor":"Creating-the-Filter-Component","level":2,"type":"heading","text":"Creating the Filter Component"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using the "},{"type":"codeVoice","code":"SFFilterComponentsFactory"},{"type":"text","text":", we create the filter component by passing the fetcher, resolver, and view provider."}]},{"type":"codeListing","syntax":"swift","code":["let aircraftTypeFilterComponent = SFFilterComponentsFactory.createMultiSelectionComponent(","    title: \"Type\",","    resolver: AircraftTypeFilterResolver(),","    fetcher: AircraftTypeFilterFetcher(),","    viewProvider: AircraftTypeFilterViewProvider()",")"]},{"anchor":"Fixing-Compilation-Errors","level":3,"type":"heading","text":"Fixing Compilation Errors"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure that the "},{"type":"codeVoice","code":"AircraftType"},{"type":"text","text":" model conforms to the necessary protocols:"}]},{"type":"codeListing","syntax":"swift","code":["extension AircraftType: Identifiable, SFFiltersTitleable {","    var title: String { self.name }","}"]},{"anchor":"Managing-the-Filters","level":2,"type":"heading","text":"Managing the Filters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SFFiltersCore"},{"type":"text","text":" class manages the filters tree and notifies the UI of updates."}]},{"type":"codeListing","syntax":"swift","code":["self.filtersCore = SFFiltersCore<Aircraft>(title: \"Filters\") {","    aircraftTypeFilterComponent","}"]},{"anchor":"Filters-View-Implementation","level":3,"type":"heading","text":"Filters View Implementation"},{"type":"codeListing","syntax":"swift","code":["struct AircraftListFiltersView: View {","    @StateObject var filtersCore: SFFiltersCore<Aircraft>","    @Environment(\\.dismiss) var dismiss","    ","    var body: some View {","        VStack(spacing: 0) {","            Button(\"Reset\") { filtersCore.resetFilters() }","            SFFilterRootView(filtersCore: filtersCore)","        }","    }","}"]},{"anchor":"Triggering-Filtering","level":3,"type":"heading","text":"Triggering Filtering"},{"type":"codeListing","syntax":"swift","code":["AircraftListFiltersView(filtersCore: viewModel.filtersCore)","    .onDisappear {","        viewModel.applyFilters()","    }"]},{"anchor":"Advanced-Features-Grouped-Filters","level":2,"type":"heading","text":"Advanced Features: Grouped Filters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Filters can be grouped using "},{"type":"codeVoice","code":"SFGroupedComponent"},{"type":"text","text":", allowing nested filters."}]},{"type":"codeListing","syntax":"swift","code":["self.filtersCore = SFFiltersCore<Aircraft>(title: \"Filters\") {","    aircraftTypeFilterComponent","    ","    SFGroupedComponent(title: \"Dates\") {","        aircraftFirstFlightDateFilterComponent","        aircraftManufactureDateFilterComponent","    }","}"]},{"anchor":"Conclusion","level":2,"type":"heading","text":"Conclusion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While the imperative approach in SwiftyFilters provides flexibility, it is "},{"type":"strong","inlineContent":[{"type":"text","text":"now outdated"}]},{"type":"text","text":". The built-in filtering logic offers a more efficient and maintainable way to implement filters. It is "},{"type":"strong","inlineContent":[{"type":"text","text":"strongly recommended"}]},{"type":"text","text":" to migrate to the new approach for improved performance and usability."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftyfilters\/imperative"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/Imperative","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Integrate SwiftyFilters into an iOS app and build filters effortlessly using an imperative approach (Deprecated)"}],"kind":"article","metadata":{"roleHeading":"Article","images":[{"type":"icon","identifier":"logoswiftyfilters.png"}],"title":"Imperative Approach to Filters in SwiftyFilters","color":{"standardColorIdentifier":"gray"},"role":"article","modules":[{"name":"SwiftyFilters"}]},"hierarchy":{"paths":[["doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters"]]},"seeAlsoSections":[{"title":"Imperative approach (Deprecated)","identifiers":["doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterFetcher","doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterResolver","doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterMultiSelectionViewProvider","doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterKeywordsViewProvider","doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterRangeViewProvider","doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterSingleValueViewProvider","doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterComponentsFactory","doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterComponent"],"generated":true}],"references":{"doc://SwiftyFilters/documentation/SwiftyFilters/SFFilterResolver":{"role":"symbol","title":"SFFilterResolver","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SFFilterResolver"}],"abstract":[{"type":"text","text":"A type responsible for defining the filtering behavior of a filter component."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterResolver","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SFFilterResolver"}],"url":"\/documentation\/swiftyfilters\/sffilterresolver"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFFilterMultiSelectionViewProvider":{"role":"symbol","title":"SFFilterMultiSelectionViewProvider","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SFFilterMultiSelectionViewProvider"}],"abstract":[{"type":"text","text":"A protocol for providing a view that displays a multi-selection filter component."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterMultiSelectionViewProvider","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SFFilterMultiSelectionViewProvider"}],"url":"\/documentation\/swiftyfilters\/sffiltermultiselectionviewprovider"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFFilterRangeViewProvider":{"role":"symbol","title":"SFFilterRangeViewProvider","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SFFilterRangeViewProvider"}],"abstract":[{"type":"text","text":"A protocol for providing a view that displays a range-based filter component."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterRangeViewProvider","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SFFilterRangeViewProvider"}],"url":"\/documentation\/swiftyfilters\/sffilterrangeviewprovider"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFFilterComponentsFactory":{"role":"symbol","title":"SFFilterComponentsFactory","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SFFilterComponentsFactory"}],"abstract":[{"type":"text","text":"A factory class for creating filter components of different types."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterComponentsFactory","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SFFilterComponentsFactory"}],"url":"\/documentation\/swiftyfilters\/sffiltercomponentsfactory"},"doc://SwiftyFilters/documentation/SwiftyFilters":{"images":[{"type":"icon","identifier":"logoswiftyfilters.png"}],"role":"collection","title":"SwiftyFilters","abstract":[{"type":"text","text":"A lightweight framework designed to simplify the creation of complex filter systems in iOS apps"}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters","kind":"symbol","type":"topic","url":"\/documentation\/swiftyfilters"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFFilterKeywordsViewProvider":{"role":"symbol","title":"SFFilterKeywordsViewProvider","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SFFilterKeywordsViewProvider"}],"abstract":[{"type":"text","text":"A protocol for providing a view that displays a keyword-based filter component."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterKeywordsViewProvider","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SFFilterKeywordsViewProvider"}],"url":"\/documentation\/swiftyfilters\/sffilterkeywordsviewprovider"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFFilterComponent":{"role":"symbol","title":"SFFilterComponent","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SFFilterComponent"}],"abstract":[{"type":"text","text":"A base class representing a filter component."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterComponent","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SFFilterComponent"}],"url":"\/documentation\/swiftyfilters\/sffiltercomponent"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFFilterFetcher":{"role":"symbol","title":"SFFilterFetcher","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SFFilterFetcher"}],"abstract":[{"type":"text","text":"A type responsible for fetching data required by a filter component."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterFetcher","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SFFilterFetcher"}],"url":"\/documentation\/swiftyfilters\/sffilterfetcher"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFFilterSingleValueViewProvider":{"role":"symbol","title":"SFFilterSingleValueViewProvider","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SFFilterSingleValueViewProvider"}],"abstract":[{"type":"text","text":"A protocol for providing a view that displays a single-value filter component."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterSingleValueViewProvider","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SFFilterSingleValueViewProvider"}],"url":"\/documentation\/swiftyfilters\/sffiltersinglevalueviewprovider"},"logoswiftyfilters.png":{"alt":"Logo","type":"image","identifier":"logoswiftyfilters.png","variants":[{"url":"\/images\/logoswiftyfilters.png","traits":["1x","light"]}]}}}
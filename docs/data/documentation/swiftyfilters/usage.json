{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this article, we’ll walk through how to create filters step-by-step, using a declarative approach that feels right at home in the SwiftUI ecosystem. Ready to feel the magic? Let’s dive in!"}]},{"anchor":"The-Four-Key-Questions-to-Answer-Before-Building-Filters","level":2,"type":"heading","text":"The Four Key Questions to Answer Before Building Filters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before diving into code, it’s essential to answer four foundational questions to guide your filter implementation:"}]},{"anchor":"1-What-is-the-filtered-input-data","level":4,"type":"heading","text":"1. What is the filtered input data?"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the data you want to filter—typically an array of objects (e.g., a list of aircraft)."}]},{"anchor":"2-What-is-the-criteria-for-filtering","level":4,"type":"heading","text":"2. What is the criteria for filtering?"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Define the criteria items that will be used to filter the input data (e.g., aircraft types, dates, or keywords)."}]},{"anchor":"3-How-should-the-input-data-be-filtered","level":4,"type":"heading","text":"3. How should the input data be filtered?"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Specify the property of the input item that the filter should use for matching. For example, filter aircraft by their "},{"type":"codeVoice","code":"type"},{"type":"text","text":" property."}]},{"anchor":"4-How-should-the-filter-component-be-represented-in-the-UI","level":4,"type":"heading","text":"4. How should the filter component be represented in the UI?"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Decide how the filter will be displayed to the user. Will it be a multi-selection list, a date range picker, or a keyword search?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By answering these questions, you’ll have a clear roadmap for implementing your filters."}]},{"anchor":"Planning-Your-Filter-Answering-the-Key-Questions","level":2,"type":"heading","text":"Planning Your Filter: Answering the Key Questions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s walk through an example of building a filter for a list of aircraft. We’ll filter the aircraft by their "},{"type":"strong","inlineContent":[{"type":"text","text":"type"}]},{"type":"text","text":" using a multi-selection filter."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The final project can be found in the repository within the "},{"type":"strong","inlineContent":[{"type":"text","text":"SwiftyFilters-Example-iOS"}]},{"type":"text","text":" target."}]},{"anchor":"1-What-is-the-filtered-input-data","level":3,"type":"heading","text":"1. What is the filtered input data?"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In our example, it’s an array of "},{"type":"codeVoice","code":"Aircraft"},{"type":"text","text":" objects:"}]},{"type":"codeListing","syntax":"swift","code":["struct Aircraft: Identifiable {","    var id: UUID","    var type: AircraftType","    var remarks: String","    \/\/ ... other properties","}"]},{"anchor":"2-What-is-the-criteria-for-filtering","level":3,"type":"heading","text":"2. What is the criteria for filtering?"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For our "},{"type":"strong","inlineContent":[{"type":"text","text":"aircraft type filter"}]},{"type":"text","text":", it’s an array of "},{"type":"codeVoice","code":"AircraftType"},{"type":"text","text":". We’ll fetch these types from a worker class:"}]},{"type":"codeListing","syntax":"swift","code":["protocol AircraftListWorker {","    func fetchAllTypes() async -> [AircraftType]","}","","class AircraftListWorkerStub: AircraftListWorker {","    func fetchAllTypes() async -> [AircraftType] {","        try? await Task.sleep(nanoseconds: 200_000_000) \/\/ Simulate network delay","        return [.mockAirbus1, .mockAirbus2, .mockBoeing1, .mockBoeing2]","    }","}"]},{"anchor":"Key-Requirement","level":4,"type":"heading","text":"Key Requirement:"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Your "},{"type":"strong","inlineContent":[{"type":"text","text":"criteria type ("},{"type":"codeVoice","code":"AircraftType"},{"type":"text","text":")"}]},{"type":"text","text":" must conform to "},{"type":"codeVoice","code":"SFFiltersTitleable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["import SwiftyFilters","","\/\/ MARK: - SFFiltersTitleable implementation","extension AircraftType: SFFiltersTitleable {","    var title: String { self.name }","}","","\/\/ MARK: - Equatable implementation","extension AircraftType: Equatable {","    static func == (lhs: AircraftType, rhs: AircraftType) -> Bool {","        lhs.id == rhs.id","    }","}"]},{"anchor":"3-How-should-the-input-data-be-filtered","level":3,"type":"heading","text":"3. How should the input data be filtered?"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here, we filter aircraft by their "},{"type":"strong","inlineContent":[{"type":"text","text":"type"}]},{"type":"text","text":" property."}]},{"anchor":"4-How-is-the-filter-displayed","level":3,"type":"heading","text":"4. How is the filter displayed?"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For the UI, we’ll create a custom multi-selection view. SwiftyFilters provides default views for multi-selection and keywords-based filters, but we’ll build a custom one for demonstration:"}]},{"type":"codeListing","syntax":"swift","code":["import SwiftyFilters","import SwiftUI","","\/\/ MARK: - Multi-selection filter custom view","","struct MultiSelectionFilterView: View {","    ","    @StateObject var node: SFFilterMultiSelectionNode<Aircraft>","    ","    var body: some View {","        Group {","            if node.isLoading {","                ProgressView()","            } else {","                List {","                    Group {","                        MultiSelectionFilterActionsCell(node: node)","                        ForEach(node.nestedNodes) { child in","                            MultiSelectionFilterCell(node: child)","                                .onTapGesture {","                                    child.isItemEnabled.toggle()","                                }","                        }","                    }","                    .listRowInsets(EdgeInsets())","                    .listRowSeparator(.hidden)","                }","                .listStyle(PlainListStyle())","            }","        }","        .animation(.easeIn(duration: 0.1), value: node.isItemEnabled)","    }","}"]},{"anchor":"Key-Notes-About-Node","level":4,"type":"heading","text":"Key Notes About Node"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A Node (like "},{"type":"codeVoice","code":"SFFilterMultiSelectionNode"},{"type":"text","text":") acts as a state manager for your filter:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Tracks selections, loading states, and criteria."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provides "},{"type":"codeVoice","code":"nestedNodes"},{"type":"text","text":" for each criteria item."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"@StateObject"},{"type":"text","text":" to preserve state across updates."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For advanced usage, see the SwiftyFilters Documentation or review the following article: "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/CustomViewCreation"}]},{"anchor":"Building-the-Filter-Component","level":3,"type":"heading","text":"Building the Filter Component"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Perfect! We’re all set to start creating our filter component. This is where the real magic of SwiftyFilters happens ✨—building filters declaratively, just like you build SwiftUI views. With SwiftyFilters, you define what you want to filter, and the framework takes care of the how. Let’s dive into the process step by step."}]},{"anchor":"1-Define-the-Root-Filter","level":4,"type":"heading","text":"1. Define the Root Filter"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Start by creating a struct conforming to "},{"type":"codeVoice","code":"SFFilter"},{"type":"text","text":". Just like SwiftUI’s "},{"type":"codeVoice","code":"View"},{"type":"text","text":" protocol, this requires a "},{"type":"codeVoice","code":"body"},{"type":"text","text":" property where we define our filter hierarchy:"}]},{"type":"codeListing","syntax":"swift","code":["import SwiftyFilters","","\/\/ - MARK: AircraftFilter","","struct AircraftFilter: SFFilter {","    var body: [SFFilterComponent<Aircraft>] {","        \/\/ Filters will be added here","    }","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The generic type of "},{"type":"codeVoice","code":"SFFilterComponent"},{"type":"text","text":" in the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" array must match the type of the items being filtered"}]}],"type":"aside","name":"Note"},{"anchor":"2-Add-a-Multi-Selection-Filter","level":4,"type":"heading","text":"2. Add a Multi-Selection Filter"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s implement our aircraft type filter. We’ll use "},{"type":"codeVoice","code":"SFMultiSelectionFilter"},{"type":"text","text":", specifying:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The filtered type ("},{"type":"codeVoice","code":"Aircraft"},{"type":"text","text":")."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The criteria type ("},{"type":"codeVoice","code":"AircraftType"},{"type":"text","text":")."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A title for the UI."}]}]}]},{"type":"codeListing","syntax":"swift","code":["import SwiftyFilters","","\/\/ - MARK: AircraftFilter","","struct AircraftFilter: SFFilter {","","    let worker: AircraftListWorker","    ","    var body: [SFFilterComponent<Aircraft>] {","        SFMultiSelectionFilter(title: \"Type\")","            .fetchItems { await worker.fetchAllTypes() }","            .filter(by: \\ .type)","            .displayIn { node in","                MultiSelectionFilterView(node: node)","            }","    }","}"]},{"anchor":"Whats-happening-here","level":5,"type":"heading","text":"What’s happening here?"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".fetchItems"},{"type":"text","text":": Fetches the criteria items (aircraft types)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".filter(by: \\ .type)"},{"type":"text","text":": Filters aircraft by their "},{"type":"codeVoice","code":"type"},{"type":"text","text":" property."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".displayIn"},{"type":"text","text":": Uses our custom view for the filter."}]}]}]},{"anchor":"3-Expand-with-More-Filters","level":4,"type":"heading","text":"3. Expand with More Filters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s add additional filters to demonstrate SwiftyFilters’ flexibility:"}]},{"type":"codeListing","syntax":"swift","code":["import SwiftyFilters","","\/\/ - MARK: AircraftFilter","","struct AircraftFilter: SFFilter {","    ","    let worker: AircraftListWorker","    ","    var body: [SFFilterComponent<Aircraft>] {","        \/\/ MARK: - Aircraft Type Filter","        SFMultiSelectionFilter(title: \"Type\")","            .fetchItems { await worker.fetchAllTypes() }","            .filter(by: \\ .type)","            .displayIn { MultiSelectionFilterView(node: $0) }","        ","        \/\/ MARK: - Last Exploiter Filter (with default UI)","        SFMultiSelectionFilter(title: \"Last Exploiter\")","            .fetchItems { await worker.fetchAllExploiters() }","            .filter(byOptional: \\ .lastExploater)","            .includeNone(withTitle: \"New Aircraft\")","        ","        \/\/ MARK: - Remarks Keyword Filter","        SFKeywordsFilter(title: \"Remarks\")","            .filter(by: \\ .remarks)","            .includeNone(withTitle: \"No Remarks\")","        ","        \/\/ MARK: - Dates Section (Grouped)","        SFGroupedComponent(title: \"Dates\") {","            SFRangeFilter(title: \"First Flight Date\")","                .filter(by: \\ .firstFlightDate)","                .displayIn { SFFilterDateRangeView(node: $0) }","            ","            \/\/ MARK: - Age Section (Grouped)","            SFGroupedComponent(title: \"Age\") {","                SFRangeFilter(title: \"Manufacture Date\")","                    .filter(by: \\ .manufactureDate)","                    .displayIn { SFFilterDateRangeView(node: $0) }","                ","                SFSingleValueFilter(title: \"Is New?\")","                    .filter(by: \\ .isNew)","                    .displayIn { BooleanOptionFilterView(node: $0) }","            }","        }","    }","}"]},{"anchor":"4-Refactor-for-Readability","level":4,"type":"heading","text":"4. Refactor for Readability"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Just like SwiftUI views, you can decompose large filters into smaller components. Let’s extract the dates section into the separate "},{"type":"codeVoice","code":"AircraftDatesFilter"},{"type":"text","text":" conforming to "},{"type":"codeVoice","code":"SFFilter"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["import SwiftyFilters","","\/\/ - MARK: AircraftDatesFilter sub-filter","","struct AircraftDatesFilter: SFFilter {","","    var body: [SFFilterComponent<Aircraft>] {","        SFGroupedComponent(title: \"Dates\") {","            SFRangeFilter(title: \"First Flight Date\")","                .filter(by: \\ .firstFlightDate)","                .displayIn { SFFilterDateRangeView(node: $0) }","            ","            SFGroupedComponent(title: \"Age\") {","                SFRangeFilter(title: \"Manufacture Date\")","                    .filter(by: \\ .manufactureDate)","                    .displayIn { SFFilterDateRangeView(node: $0) }","                ","                SFSingleValueFilter(title: \"Is New?\")","                    .filter(by: \\ .isNew)","                    .displayIn { BooleanOptionFilterView(node: $0) }","            }","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then, use it in your root filter:"}]},{"type":"codeListing","syntax":"swift","code":["import SwiftyFilters","","\/\/ - MARK: AircraftFilter","","struct AircraftFilter: SFFilter {","    let worker: AircraftListWorker","    ","    var body: [SFFilterComponent<Aircraft>] {","        SFMultiSelectionFilter(title: \"Type\") { ... }","        SFMultiSelectionFilter(title: \"Last Exploiter\") { ... }","        SFKeywordsFilter(title: \"Remarks\") { ... }","        ","        \/\/ Reusable dates section","        AircraftDatesFilter()","    }","}"]},{"anchor":"Managing-State-and-Integrating-with-SwiftUI","level":2,"type":"heading","text":"Managing State and Integrating with SwiftUI"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With our filter component built, it’s time to bring everything together. Let’s manage the filter state and integrate it into a SwiftUI view - just like you’d manage state for a typical SwiftUI component."}]},{"anchor":"1-Create-the-Filter-State-Manager","level":3,"type":"heading","text":"1. Create the Filter State Manager"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We’ll use "},{"type":"codeVoice","code":"SFFiltersCore"},{"type":"text","text":" to manage the filter hierarchy and state. Think of this as the equivalent of "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" for your filters:"}]},{"type":"codeListing","syntax":"swift","code":["import SwiftUI","import SwiftyFilters","","\/\/ MARK: - AircraftListViewModel ","","class AircraftListViewModel: ObservableObject {","    ","    private var aircraft: [Aircraft] = []","    private let worker: AircraftListWorker","    ","    @Published var filteredAircraft: [Aircraft] = []","    @Published var isFiltersViewPresented = false","    ","    let filtersCore: SFFiltersCore<Aircraft>","    ","    ","    init(worker: AircraftListWorker) {","        self.worker = worker","        let filter = AircraftFilter(worker: worker)","        self.filtersCore = SFFiltersCore<Aircraft>(title: \"Filters\", content: filter)","    }","    ","    func loadAircraft() async {","        self.aircraft = await worker.fetchAllAircraft()","        await MainActor.run {","            self.filteredAircraft = self.aircraft","        }","    }","    ","    func applyFilters() {","        self.filteredAircraft = filtersCore.getFilteredData(from: aircraft)","    }","}"]},{"anchor":"Key-Points","level":4,"type":"heading","text":"Key Points:"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"SFFiltersCore"},{"type":"text","text":" manages the entire filter tree’s state."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"getFilteredData(from:)"},{"type":"text","text":" applies all active filters to your raw data."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The ViewModel bridges your data and the filter logic."}]}]}]},{"anchor":"2-Build-the-Filters-View","level":3,"type":"heading","text":"2. Build the Filters View"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a SwiftUI view to display the filter interface. This is where "},{"type":"codeVoice","code":"SFFilterRootView"},{"type":"text","text":" shines – it automatically renders your filter hierarchy:"}]},{"type":"codeListing","syntax":"swift","code":["import SwiftUI","import SwiftyFilters","","\/\/ MARK: - AircraftListFiltersView","","struct AircraftListFiltersView: View {","    @StateObject var filtersCore: SFFiltersCore<Aircraft>","    @Environment(\\.dismiss) var dismiss","    ","    var body: some View {","        VStack(spacing: 0) {","            \/\/ Custom toolbar","            HStack {","                Button(\"Reset\") { filtersCore.resetFilters() }","                Spacer()","                Button(\"OK\") { dismiss() }","            }","            .padding()","            .background(Color.blue.opacity(0.8))","            ","            \/\/ The magic happens here","            SFFilterRootView(filtersCore: filtersCore)","        }","    }","}"]},{"anchor":"Whats-Special-Here","level":4,"type":"heading","text":"What’s Special Here?"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"SFFilterRootView"},{"type":"text","text":" automatically displays your filter components."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"strong","inlineContent":[{"type":"text","text":"Reset"}]},{"type":"text","text":" button clears all filter selections."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"strong","inlineContent":[{"type":"text","text":"OK"}]},{"type":"text","text":" button dismisses the view while preserving state."}]}]}]},{"anchor":"3-Connect-to-Your-Main-View","level":3,"type":"heading","text":"3. Connect to Your Main View"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, present the filters and apply them when dismissed:"}]},{"type":"codeListing","syntax":"swift","code":["import SwiftUI","","\/\/ MARK: - AircraftListView","","struct AircraftListView: View {","    ","    @StateObject var viewModel: AircraftListViewModel","    ","    ","    var body: some View {","        NavigationView {","            \/\/ List view is being hidden for the sake of readability","            .sheet(isPresented: $viewModel.isFiltersViewPresented) {","                AircraftListFiltersView(filtersCore: viewModel.filtersCore)","                    .onDisappear {","                        viewModel.applyFilters()","                    }","            }","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":".onDisappear"},{"type":"text","text":" modifier ensures filters are applied automatically when users close the filters view. For more control, you could move "},{"type":"codeVoice","code":"applyFilters()"},{"type":"text","text":" to a "},{"type":"strong","inlineContent":[{"type":"text","text":"Done"}]},{"type":"text","text":" button action instead."}]},{"anchor":"Final-Result","level":3,"type":"heading","text":"Final Result"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You’ve now built:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A declarative filter component hierarchy"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A state manager for filter rules"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A reusable filters view"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Seamless SwiftUI integration"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The entire system works like a well-oiled machine:"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Users select filters → "},{"type":"codeVoice","code":"SFFiltersCore"},{"type":"text","text":" tracks changes → Filtered results update on demand according to filters tree state."}]}]},{"anchor":"Final-Thoughts","level":3,"type":"heading","text":"Final Thoughts"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"SwiftyFilters"},{"type":"text","text":" transforms filter creation from a tedious task into a streamlined, SwiftUI-like experience. By focusing on "},{"type":"emphasis","inlineContent":[{"type":"text","text":"what"}]},{"type":"text","text":" to filter rather than "},{"type":"emphasis","inlineContent":[{"type":"text","text":"how"}]},{"type":"text","text":", you can build sophisticated filter systems in minutes — not hours."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftyfilters\/usage"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/Usage","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Integrate SwiftyFilters into an iOS app and build filters effortlessly using a declarative approach"}],"kind":"article","metadata":{"roleHeading":"Article","images":[{"type":"icon","identifier":"logoswiftyfilters.png"}],"title":"Getting started with SwiftyFilters","role":"article","modules":[{"name":"SwiftyFilters"}]},"hierarchy":{"paths":[["doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters"]]},"seeAlsoSections":[{"title":"Essentials","identifiers":["doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/CustomViewCreation","doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilter","doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFiltersCore","doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterRootView","doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFGroupedComponent"],"generated":true}],"references":{"doc://SwiftyFilters/documentation/SwiftyFilters/CustomViewCreation":{"images":[{"type":"icon","identifier":"logoswiftyfilters.png"}],"role":"article","title":"Creation of custom views","abstract":[{"type":"text","text":"Learn how to create custom views for filter components"}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/CustomViewCreation","kind":"article","type":"topic","url":"\/documentation\/swiftyfilters\/customviewcreation"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFFiltersCore":{"role":"symbol","title":"SFFiltersCore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SFFiltersCore"}],"abstract":[{"type":"text","text":"The main entry point for working with filters in client code."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFiltersCore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SFFiltersCore"}],"url":"\/documentation\/swiftyfilters\/sffilterscore"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFFilter":{"role":"symbol","title":"SFFilter","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SFFilter"}],"abstract":[{"type":"text","text":"A protocol that defines a filter component, which can be used to build complex filters."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SFFilter"}],"url":"\/documentation\/swiftyfilters\/sffilter"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFFilterRootView":{"role":"symbol","title":"SFFilterRootView","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SFFilterRootView"}],"abstract":[{"type":"text","text":"A view that displays the root of the filter hierarchy."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFFilterRootView","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SFFilterRootView"}],"url":"\/documentation\/swiftyfilters\/sffilterrootview"},"logoswiftyfilters.png":{"alt":"Logo","type":"image","identifier":"logoswiftyfilters.png","variants":[{"url":"\/images\/logoswiftyfilters.png","traits":["1x","light"]}]},"doc://SwiftyFilters/documentation/SwiftyFilters":{"images":[{"type":"icon","identifier":"logoswiftyfilters.png"}],"role":"collection","title":"SwiftyFilters","abstract":[{"type":"text","text":"A lightweight framework designed to simplify the creation of complex filter systems in iOS apps"}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters","kind":"symbol","type":"topic","url":"\/documentation\/swiftyfilters"},"doc://SwiftyFilters/documentation/SwiftyFilters/SFGroupedComponent":{"role":"symbol","title":"SFGroupedComponent","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SFGroupedComponent"}],"abstract":[{"type":"text","text":"A component that groups multiple filter components under a single title."}],"identifier":"doc:\/\/SwiftyFilters\/documentation\/SwiftyFilters\/SFGroupedComponent","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SFGroupedComponent"}],"url":"\/documentation\/swiftyfilters\/sfgroupedcomponent"}}}